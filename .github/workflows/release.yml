name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'PCSX2 Patches/**'

jobs:
  delete-and-create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up GitHub CLI
      run: sudo apt-get install gh

    - name: Authenticate GitHub CLI
      run: gh auth login --with-token < ${{ secrets.GH_TOKEN }}

    - name: Get previous release
      id: get_release
      run: |
        previous_release=$(gh release list --limit 1 --json tagName -q '.[].tagName')
        echo "previous_release=$previous_release" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Delete previous release
      if: env.previous_release != ''
      run: |
        gh release delete ${{ env.previous_release }} --yes
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Check if previous tag exists
      id: check_tag
      run: |
        if [ ! -z "${{ env.previous_release }}" ] && git rev-parse ${{ env.previous_release }} >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "tag_exists=false" >> $GITHUB_ENV
        fi

    - name: Delete previous tag
      if: env.tag_exists == 'true'
      run: |
        git tag -d ${{ env.previous_release }}
        git push --delete origin ${{ env.previous_release }}

    - name: Set up zip file name
      run: echo "ZIP_NAME=patches_$(date +'%d%m%y').zip" >> $GITHUB_ENV

    - name: Get short SHA
      id: vars
      run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Create zip file
      run: zip -r ${{ env.ZIP_NAME }} "PCSX2 Patches"

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: latest
        release_name: latest build
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ZIP_NAME }}
        asset_name: ${{ env.ZIP_NAME }}
        asset_content_type: application/zip
